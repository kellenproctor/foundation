#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################
# https://www.linuxjournal.com/content/bash-trap-command FOLLOW UP ON THIS

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Foundation failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

# string formatters
if [[ -t 1 ]]
then
  tty_escape() { printf "\033[%sm" "$1"; }
else
  tty_escape() { :; }
fi
tty_mkbold() { tty_escape "1;$1"; }
tty_underline="$(tty_escape "4;39")"
tty_blue="$(tty_mkbold 34)"
tty_red="$(tty_mkbold 31)"
tty_bold="$(tty_mkbold 39)"
tty_reset="$(tty_escape 0)"

getc() {
  local save_state
  save_state="$(/bin/stty -g)"
  /bin/stty raw -echo
  IFS='' read -r -n 1 -d '' "$@"
  /bin/stty "${save_state}"
}

wait_for_user() {
  local c
  echo
  echo "Press ${tty_bold}RETURN${tty_reset}/${tty_bold}ENTER${tty_reset} to continue or any other key to abort:"
  getc c
  # we test for \r and \n because some stuff does \r instead
  if ! [[ "${c}" == $'\r' || "${c}" == $'\n' ]]
  then
    exit 1
  fi
}

DramaticEllipsis ()
{
	sleep 0.3
	printf "."
	sleep 0.3
	printf "."
	sleep 0.3
	printf ". "
	sleep 0.5
}

DramaticTyping ()
{
	local OLD_IFS="$IFS"
	IFS=
	for (( i=0; i<${#1}; i++ )); do
		printf ${1:$i:1}
		sleep $2
	done
	IFS="$OLD_IFS"
}

PunnyCheck ()
{
	if [ -z "${!1}" ]; then
		printf "$3\n\n"
		printf "$4\n"
		wait_for_user
	else
		printf "$2\n"
	fi	
}


# Get arrays
APPS=$(curl -fs https://raw.githubusercontent.com/kellenproctor/foundation/master/swag/apps)
printf " "
DramaticTyping "Apps..." 0.1
PunnyCheck APPS "HOT AND FRESH!" "still in the freezer." "Ok to move ahead without apps?"

BREWS=$(curl -fs https://raw.githubusercontent.com/kellenproctor/foundation/master/swag/brews)
printf " "
DramaticTyping "Brews..." 0.1
PunnyCheck BREWS "COLD AND FOAMY!" "skunked" "Ok to move ahead without brews?"

CASKS=$(curl -fs https://raw.githubusercontent.com/kellenproctor/foundation/master/swag/casks)
printf " "
DramaticTyping "Casks..." 0.1
PunnyCheck CASKS "TAPPED AND FLOWING!" "not yet delivered" "OK to move ahead without casks?"

# Get twirl
eval "$(curl -s https://raw.githubusercontent.com/kellenproctor/foundation/master/twirl)"

if [ -v $e_lemon_ated ]; then
	printf "\n "
	DramaticTyping "Get ready for..." 0.1
	echo
	sleep 0.5
else
	printf "\n ⚠️  ./twirl not found  💃🏾 First, you need to twirl on your haters\n"
	printf " Required functions file missing, please edit the script to get twirl\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

###############################################################################
# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

printf "
   _
  | |
  | |  __   ,_    _  _  _    __, _|_ 🍋  __   _  _
  |/  /  \_/  |  / |/ |/ |  /  |  |  |  /  \_/ |/ |
  |__/\__/    |_/  |  |  |_/\_/|_/|_/|_/\__/   |  |
  |\  ---------------------------------------------
  |/  Cause you slay           [for Bash 3.2 - 3.9]
╭───────────────────────────────────────────────────╮
│  Okay developers now let's get in ${bold}formation${normal}.      │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

sleep 0.2


###############################################################################
# CHECK: Internet
###############################################################################
DramaticTyping "$(chapter 'Checking internet connection…')" 0.05
echo
sleep 0.1
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
DramaticTyping "$(chapter 'Caching password…')" 0.05
echo
sleep 0.1
ask_for_sudo

###############################################################################
# PROMPT: SSH Key
###############################################################################
DramaticTyping "$(chapter 'Checking for SSH key…')" 0.05
echo
sleep 0.1
ssh_key_setup

###############################################################################
# INSTALL: Dependencies
###############################################################################
DramaticTyping "$(chapter 'Installing Dependencies…')" 0.05
echo
sleep 0.1

# -----------------------------------------------------------------------------
# XCode
# -----------------------------------------------------------------------------
if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
	test -d "${xpath}" && test -x "${xpath}" ; then
	print_success_muted "Xcode already installed. Skipping."
else
	step "Installing Xcode…"
	xcode-select --install
	print_success "Xcode installed!"
fi

if [ ! -d "$HOME/.bin/" ]; then
	mkdir "$HOME/.bin"
fi

# -----------------------------------------------------------------------------
# Bash-it
# -----------------------------------------------------------------------------
if [ -d "$HOME/.bash_it" ]; then
	print_success_muted "Bash-it already installed. Skipping."
else
	step "Installing Bash-it…"
	git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it
	~/.bash_it/install.sh --silent --no-modify-config
	print_success "Bash-it installed!"
fi

# -----------------------------------------------------------------------------
# NVM
# -----------------------------------------------------------------------------
if [ -x nvm ]; then
	step "Installing NVM…"
	curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
	print_success "NVM installed!"
	step "Installing latest Node…"
	nvm install node
	nvm use node
	nvm run node --version
	nodev=$(node -v)
	print_success "Using Node $nodev!"
else
	print_success_muted "NVM/Node already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
	NONINTERACTIVE=1 /bin/bash -c \
	"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	# Need to change this depending on ARM or Linux !!!!!!!
	# export PATH="/usr/local/bin:$PATH" # Old Linux
	export PATH="/opt/homebrew/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

# if brew list | grep -Fq brew-cask; then
# 	step "Uninstalling old Homebrew-Cask…"
# 	brew uninstall --force brew-cask
# 	print_success "Homebrew-Cask uninstalled!"
# fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: brews
###############################################################################
if [ -z "${BREWS}" ]; then
	DramaticTyping "$(chapter 'Installing Homebrew formulae…')" 0.05

	for brew in $(BREWS); do
		install_brews $brew
	done
fi

###############################################################################
# INSTALL: casks
###############################################################################
chapter "Installing apps via Homebrew…"

for cask in ${CASKS}; do
	install_application_via_brew $cask
done

###############################################################################
# INSTALL: Mac App Store Apps
###############################################################################
chapter "Installing apps from App Store…"
if [ -x mas ]; then
	print_warning "Please install mas-cli first: brew mas. Skipping."
fi


if mas_setup; then
	# Workaround for associative array in Bash 3
	# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option
	for app in ${APPS}; do
		KEY="${app%%::*}"
		VALUE="${app##*::}"
		install_application_via_app_store $KEY $VALUE
	done
else
	print_warning "Please signin to App Store first. Skipping."
fi


###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup 2> /dev/null

###############################################################################
# INSTALL: npm packages
###############################################################################
# if [ -e $cwd/swag/npm ]; then
# 	chapter "Installing npm packages…"

# 	for pkg in $(<$cwd/swag/npm); do
# 		KEY="${pkg%%::*}"
# 		VALUE="${pkg##*::}"
# 		install_npm_packages $KEY $VALUE
# 	done
# fi

###############################################################################
# INSTALL: Chezmoi Dotfiles
###############################################################################
sh -c "$(curl -fsLS get.chezmoi.io)" -- init --one-shot kellenproctor


###############################################################################
# OPTIONAL: Customizations
###############################################################################
chapter "Adding hot sauce…"
HOTSAUCE="$(curl -s https://raw.githubusercontent.com/kellenproctor/foundation/master/hot-sauce)"

if [ -n $HOTSAUCE ]; then
	if ask "Do you want to add hot sauce?" Y; then
		eval $HOTSAUCE; printf "\n  You got hot sauce in your bag. 🔥 ${bold}Swag.${normal}\n";
	else
		print_success_muted "Hot sauce declined. Skipped.";
	fi
else
	print_warning "No hot-sauce found. Skipping."
fi


###############################################################################
# 🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋🍋
###############################################################################
e_lemon_ated
